function [lnA_r, lnA_p, lnA_m, lnA_s, rhy_r, rhy_p, rhy_m, rhy_s, Zmd_r, Zmd_p, Zmd_m, Zmd_s]=dg_block_stats(lnA_blocks, rhythm_blocks, dz_dist, tr_sc, beh_types, baseline_type)
%% this function calculates the stats, etc here.

for chan=1:size(lnA_blocks,2)
    for k=1:length(beh_types)
        if any(tr_sc==beh_types(k))  
            % Means
            lnA_m(chan,k)=mean(lnA_blocks(find(tr_sc==beh_types(k)),chan));
            rhy_m(chan,k)=mean(rhythm_blocks(find(tr_sc==beh_types(k)),chan));
            Zmd_m(chan,k)=mean(dz_dist{k,chan});

            % Standard errors used -- Currently returns SEM - change this note if you change stats!
            lnA_s(chan,k)=std(lnA_blocks(find(tr_sc==beh_types(k)),chan))/sqrt(sum(tr_sc==beh_types(k)));
            rhy_s(chan,k)=std(rhythm_blocks(find(tr_sc==beh_types(k)),chan))/sqrt(sum(tr_sc==beh_types(k)));
            Zmd_s(chan,k)=std(dz_dist{k,chan})/sqrt(sum(tr_sc==beh_types(k)));
            
            % Signed - r2
            lnA_r(chan,k)=rsa(...
                lnA_blocks(find(tr_sc==beh_types(k)),chan),...
                lnA_blocks(find(tr_sc==baseline_type),chan)...
                );
            rhy_r(chan,k)=rsa(...
                rhythm_blocks(find(tr_sc==beh_types(k)),chan),...
                rhythm_blocks(find(tr_sc==baseline_type),chan)...
                );
            Zmd_r(chan,k)=rsa(...
                dz_dist{k,chan},...
                dz_dist{find(beh_types==baseline_type),chan}...
                );

            % pvalue - Now using t-test - can switch to reshuffling later (may be more appropriate)
            [tmp, lnA_p(chan,k)]=ttest2(...
                lnA_blocks(find(tr_sc==beh_types(k)),chan),...
                lnA_blocks(find(tr_sc==baseline_type),chan)...
                );
            [tmp, rhy_p(chan,k)]=ttest2(...
                rhythm_blocks(find(tr_sc==beh_types(k)),chan),...
                rhythm_blocks(find(tr_sc==baseline_type),chan)...
                );
            [tmp, Zmd_p(chan,k)]=ttest2(...
                dz_dist{k,chan},...
                dz_dist{find(beh_types==baseline_type),chan}...
                );
        end
        if beh_types(k)==baseline_type  % get baseline's PAC significance vs. zero
            % pvalue - now t-test, can switch to reshuffling later
            [tmp, Zmd_p(chan,k)]=ttest(...
                dz_dist{find(beh_types==baseline_type),chan}...
                );
        end
    end
end